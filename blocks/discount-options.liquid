
<style>
  /* Wrapper */
.discount-table-wrapper {
  margin: 1.5rem 0;
  border: 1px solid #FBFBFB;
  overflow: hidden;
}

/* Header */
.discount-table-header {
  padding: 1rem;
  background: #FBFBFB;
  border-bottom: 1px solid #FBFBFB;
  text-align: center;
}
.discount-table-header h3 {
  margin: 0;
  font-size: 1.25rem;
  font-weight: 600;
}
.discount-table-header .discount-subtitle {
  margin: 0.25rem 0 0;
  font-size: 0.9rem;
  color: #6b7280;
}

/* Table */
.discount-table-container {
  overflow-x: auto;
}
.discount-table {
  width: 100%;
  border-collapse: collapse;
  font-size: 0.95rem;
}
.discount-table th,
.discount-table td {
  padding: 0.75rem 1rem;
  text-align: center;
  border-bottom: 1px solid #f0f0f0;
}
.discount-table th {
  background: #f3f4f6;
  font-weight: 600;
  color: #374151;
}
.discount-row.even {
  background: #ffffff;
}
.discount-row.odd {
  background: #fafafa;
}

/* Quantity badge */
.quantity-badge {
  display: inline-block;
  padding: 0.3rem 0.75rem;: #eef2ff;
  color: #3730a3;
  font-weight: 600;
  font-size: 0.85rem;
}

/* Discount badge */
.discount-badge {
  display: inline-block;
  padding: 0.25rem 0.6rem;
  font-size: 0.85rem;
  font-weight: 600;
  background: #f3f4f6;
  color: #374151;
}
.discount-badge.has-discount {
  background: #dcfce7;
  color: #166534;
}
.discount-row.medium-discount .discount-badge {
  background: #fef9c3;
  color: #92400e;
}
.discount-row.high-discount .discount-badge {
  background: #fee2e2;
  color: #991b1b;
}

/* Responsive */
@media (max-width: 640px) {
  .discount-table th,
  .discount-table td {
    padding: 0.5rem;
    font-size: 0.85rem;
  }
  .discount-table-header h3 {
    font-size: 1.1rem;
  }
}

  </style>

{%- assign init_variant = product.selected_or_first_available_variant -%}
{%- assign initial_discount_data = init_variant.metafields.custom.discount_options | default: '[]' -%}

<div id="discountTableWrapper-{{ section.id }}" class="discount-table-wrapper" style="display:none;">
  <div class="discount-table-header">
    <h3>Volume Discounts</h3>
    <p class="discount-subtitle">Save more when you buy in bulk!</p>
  </div>

  <div id="discountTable-{{ section.id }}" class="discount-table-container">
    <table class="discount-table">
      <thead>
        <tr id="discountTableHead-{{ section.id }}"></tr>
      </thead>
      <tbody id="discountTableBody-{{ section.id }}"></tbody>
    </table>
  </div>
</div>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const tableHead = document.getElementById("discountTableHead-{{ section.id }}");
  const tableBody = document.getElementById("discountTableBody-{{ section.id }}");
  const wrapper  = document.getElementById("discountTableWrapper-{{ section.id }}");

  // Build a plain JS object with every variant's JSON (no double encoding)
  const variantsDiscountData = {
    {% for variant in product.variants %}
      "{{ variant.id }}": {{ variant.metafields.custom.discount_options | default: '[]' }}{% unless forloop.last %},{% endunless %}
    {% endfor %}
  };

  // Initial state
  let currentVariantId = String({{ init_variant.id }});
  let currentDiscountData = {{ initial_discount_data }};

  function buildHeader(keys) {
    tableHead.innerHTML = '';
    keys.forEach(k => {
      const th = document.createElement('th');
      th.textContent = k;
      tableHead.appendChild(th);
    });
  }

  function buildBody(keys, rows) {
    tableBody.innerHTML = '';
    rows.forEach((rowObj, idx) => {
      const tr = document.createElement('tr');
      tr.className = `discount-row ${idx % 2 === 0 ? 'even' : 'odd'}`;

      // Optional highlight by discount key
      const discountKey = keys.find(k => k.toLowerCase().includes('discount'));
      if (discountKey && rowObj[discountKey]) {
        const pct = parseInt(String(rowObj[discountKey]).replace(/[^\d]/g, '')) || 0;
        if (pct >= 25) tr.classList.add('high-discount');
        else if (pct >= 10) tr.classList.add('medium-discount');
      }

      keys.forEach(k => {
        const td = document.createElement('td');
        const val = rowObj[k] == null ? '' : rowObj[k];
        td.textContent = typeof val === 'object' ? JSON.stringify(val) : String(val);
        tr.appendChild(td);
      });

      tableBody.appendChild(tr);
    });
  }

  function renderTable(data) {
    if (!Array.isArray(data) || data.length === 0) {
      wrapper.style.display = 'none';
      return;
    }
    const keys = Object.keys(data[0]);
    if (keys.length === 0) {
      wrapper.style.display = 'none';
      return;
    }
    buildHeader(keys);
    buildBody(keys, data);
    wrapper.style.display = 'block';
  }

  function updateForVariantId(variantId) {
    const key = String(variantId);
    const data = variantsDiscountData[key];
    if (Array.isArray(data) && data.length) {
      currentVariantId = key;
      currentDiscountData = data;
      renderTable(currentDiscountData);
    } else {
      // No data for this variant â€” hide table
      wrapper.style.display = 'none';
    }
  }

  // Listen to multiple common theme events
  document.addEventListener('variant:update', (e) => {
    const id = e?.detail?.resource?.id;
    if (id) updateForVariantId(id);
  });
  document.addEventListener('product:variant:change', (e) => {
    const id = e?.detail?.variant?.id || e?.detail?.variantId;
    if (id) updateForVariantId(id);
  });
  document.addEventListener('variant:changed', (e) => {
    const id = e?.detail?.variant?.id || e?.detail?.variantId;
    if (id) updateForVariantId(id);
  });

  // Fallback: watch the hidden variant id input inside product forms
  document.querySelectorAll('form[action*="/cart/add"] [name="id"]').forEach((input) => {
    input.addEventListener('change', () => {
      if (input.value) updateForVariantId(input.value);
    });
  });

  // Initial render
  renderTable(currentDiscountData);
});
</script>



{% schema %}
{
  "name": "Discount Options",
  "settings": [],
  "presets": [
    {
      "category": "Custom Block",
      "name": "Discount Options"
    }
  ]
}
{% endschema %}
