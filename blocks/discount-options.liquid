{%- assign init_variant = product.selected_or_first_available_variant -%}
{%- assign discount_data = init_variant.metafields.custom.discount_options -%}

{%- comment -%} Create JSON object with all variants and their discount data {%- endcomment -%}
{%- assign variants_discount_data = '' -%}
{%- for variant in product.variants -%}
  {%- assign variant_discount_data = variant.metafields.custom.discount_options | default: '[]' -%}
  {%- if forloop.first -%}
    {%- assign variants_discount_data = variants_discount_data | append: '{\"' | append: variant.id | append: '\":' | append: variant_discount_data -%}
  {%- else -%}
    {%- assign variants_discount_data = variants_discount_data | append: ',\"' | append: variant.id | append: '\":' | append: variant_discount_data -%}
  {%- endif -%}
{%- endfor -%}
{%- assign variants_discount_data = variants_discount_data | append: '}' -%}

{%- if discount_data != blank -%}
<div id="discountTableWrapper-{{ section.id }}" class="discount-table-wrapper">
  <div class="discount-table-header">
    <h3>Volume Discounts</h3>
    <p class="discount-subtitle">Save more when you buy in bulk!</p>
  </div>
  
  <div id="discountTable-{{ section.id }}" class="discount-table-container">
    <table class="discount-table">
      <thead>
        <tr>
          <th>Quantity</th>
          <th>Price per item</th>
          <th>Discount</th>
        </tr>
      </thead>
      <tbody id="discountTableBody-{{ section.id }}">
        <!-- Table rows will be populated by JavaScript -->
      </tbody>
    </table>
  </div>
  
  <div class="discount-note">
    <small>* Prices shown include applicable discounts</small>
  </div>
</div>

{% comment %} <script>
document.addEventListener("DOMContentLoaded", () => {
  const discountTableBody = document.getElementById("discountTableBody-{{ section.id }}");
  const discountWrapper = document.getElementById("discountTableWrapper-{{ section.id }}");
  
  // Parse variants discount data from Liquid
  const variantsDiscountData = {{ variants_discount_data }};
  
  // Initial values
  let currentVariantId = "{{ init_variant.id }}";
  let currentDiscountData = [];

  if (!discountTableBody || !discountWrapper) return;

  // Function to populate discount table
  function populateDiscountTable(discountData) {
    discountTableBody.innerHTML = '';
    
    if (!discountData || discountData.length === 0) {
      discountWrapper.style.display = 'none';
      return;
    }
    
    discountWrapper.style.display = 'block';
    
    discountData.forEach((item, index) => {
      const row = document.createElement('tr');
      row.className = `discount-row ${index % 2 === 0 ? 'even' : 'odd'}`;
      
      // Add highlighting for higher discounts
      const discountPercentage = parseInt(item.Discount.replace(/[^\d]/g, '')) || 0;
      if (discountPercentage >= 25) {
        row.classList.add('high-discount');
      } else if (discountPercentage >= 10) {
        row.classList.add('medium-discount');
      }
      
      row.innerHTML = `
        <td class="quantity-cell">
          <span class="quantity-badge">${item.Quantity}</span>
        </td>
        <td class="price-cell">
          <strong>${item['Price per item']}</strong>
        </td>
        <td class="discount-cell">
          <span class="discount-badge ${discountPercentage > 0 ? 'has-discount' : ''}">${item.Discount}</span>
        </td>
      `;
      
      discountTableBody.appendChild(row);
    });
    
    console.log(`Discount table updated for variant ${currentVariantId}:`, discountData);
  }

  // Function to handle variant change
  function handleVariantChange(variantId) {
    if (variantsDiscountData[variantId]) {
      try {
        currentDiscountData = JSON.parse(variantsDiscountData[variantId]);
        currentVariantId = variantId;
        populateDiscountTable(currentDiscountData);
      } catch (error) {
        console.error('Error parsing discount data for variant:', variantId, error);
        discountWrapper.style.display = 'none';
      }
    } else {
      console.log('No discount data found for variant:', variantId);
      discountWrapper.style.display = 'none';
    }
  }

  // Listen for variant update events
  document.addEventListener('variant:update', (event) => {
    const variant = event.detail.resource;
    if (variant && variant.id) {
      handleVariantChange(variant.id.toString());
    }
  });

  // Initial population
  try {
    currentDiscountData = JSON.parse(`{{ discount_data | escape }}`);
    populateDiscountTable(currentDiscountData);
  } catch (error) {
    console.error('Error parsing initial discount data:', error);
    discountWrapper.style.display = 'none';
  }
});
</script> {% endcomment %}
{%- endif -%}

{% schema %}
{
  "name": "Discount Options",
  "settings": [],
  "presets": [
    {
      "category": "Custom Block",
      "name": "Discount Options"
    }
  ]
}
{% endschema %}

{% stylesheet %}
.discount-table-wrapper {
  margin: 2rem 0;
  padding: 1.5rem;
  border: 1px solid rgb(var(--color-border));
  border-radius: 8px;
  background-color: rgb(var(--color-background));
}

.discount-table-header {
  margin-bottom: 1.5rem;
  text-align: center;
}

.discount-table-header h3 {
  margin: 0 0 0.5rem 0;
  font-size: 1.5rem;
  font-weight: 600;
  color: rgb(var(--color-foreground));
}

.discount-subtitle {
  margin: 0;
  font-size: 0.9rem;
  color: rgb(var(--color-foreground-secondary));
  opacity: 0.8;
}

.discount-table-container {
  overflow-x: auto;
  margin-bottom: 1rem;
}

.discount-table {
  width: 100%;
  border-collapse: collapse;
  font-family: inherit;
}

.discount-table th {
  background-color: rgb(var(--color-background-secondary));
  color: rgb(var(--color-foreground));
  font-weight: 600;
  padding: 12px 16px;
  text-align: left;
  border-bottom: 2px solid rgb(var(--color-border));
  font-size: 0.9rem;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.discount-table td {
  padding: 12px 16px;
  border-bottom: 1px solid rgb(var(--color-border-light, --color-border));
  vertical-align: middle;
}

.discount-row:hover {
  background-color: rgb(var(--color-background-secondary));
  transition: background-color 0.2s ease;
}

.discount-row.even {
  background-color: rgba(var(--color-foreground), 0.02);
}

.discount-row.high-discount {
  background-color: rgba(var(--color-success, 76 175 80), 0.05);
  border-left: 3px solid rgb(var(--color-success, 76 175 80));
}

.discount-row.medium-discount {
  background-color: rgba(var(--color-warning, 255 193 7), 0.05);
  border-left: 3px solid rgb(var(--color-warning, 255 193 7));
}

.quantity-cell {
  font-weight: 500;
  width: 20%;
}

.quantity-badge {
  display: inline-block;
  padding: 4px 12px;
  background-color: rgb(var(--color-accent, --color-foreground));
  color: rgb(var(--color-accent-foreground, --color-background));
  border-radius: 20px;
  font-size: 0.85rem;
  font-weight: 600;
  min-width: 24px;
  text-align: center;
}

.price-cell {
  font-size: 1rem;
  color: rgb(var(--color-foreground));
  width: 40%;
}

.discount-cell {
  width: 40%;
}

.discount-badge {
  display: inline-block;
  padding: 4px 8px;
  border-radius: 4px;
  font-size: 0.85rem;
  font-weight: 500;
  background-color: rgb(var(--color-background-secondary));
  color: rgb(var(--color-foreground-secondary));
}

.discount-badge.has-discount {
  background-color: rgb(var(--color-success, 76 175 80));
  color: white;
}

.discount-note {
  text-align: center;
  margin-top: 1rem;
  color: rgb(var(--color-foreground-secondary));
  font-size: 0.85rem;
}

/* Responsive Design */
@media (max-width: 768px) {
  .discount-table-wrapper {
    padding: 1rem;
    margin: 1rem 0;
  }
  
  .discount-table-header h3 {
    font-size: 1.25rem;
  }
  
  .discount-table th,
  .discount-table td {
    padding: 8px 12px;
    font-size: 0.85rem;
  }
  
  .discount-table th {
    font-size: 0.8rem;
  }
  
  .quantity-badge {
    padding: 2px 8px;
    font-size: 0.8rem;
  }
  
  .discount-badge {
    padding: 2px 6px;
    font-size: 0.8rem;
  }
}

@media (max-width: 480px) {
  .discount-table-wrapper {
    padding: 0.75rem;
  }
  
  .discount-table th,
  .discount-table td {
    padding: 6px 8px;
    font-size: 0.8rem;
  }
  
  .discount-table-header h3 {
    font-size: 1.1rem;
  }
  
  .discount-subtitle {
    font-size: 0.85rem;
  }
}

/* Table style variations */
.discount-table-wrapper[data-style="minimal"] {
  border: none;
  background-color: transparent;
  padding: 1rem 0;
}

.discount-table-wrapper[data-style="minimal"] .discount-table th {
  background-color: transparent;
  border-bottom: 1px solid rgb(var(--color-border));
}

.discount-table-wrapper[data-style="striped"] .discount-row:nth-child(even) {
  background-color: rgba(var(--color-foreground), 0.03);
}

.discount-table-wrapper[data-style="bordered"] .discount-table,
.discount-table-wrapper[data-style="bordered"] .discount-table th,
.discount-table-wrapper[data-style="bordered"] .discount-table td {
  border: 1px solid rgb(var(--color-border));
}
{% endstylesheet %}